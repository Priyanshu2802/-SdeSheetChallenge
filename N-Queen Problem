 void solution(int n,vector<vector<int>>&board,vector<vector<string>>&ans)
    {
        vector<string>temp;
        for(int i=0;i<n;i++)
        {
           string s="";
            for(int j=0;j<n;j++)
            {
                if(board[i][j]==1)s.push_back('Q');
                else
                    s.push_back('.');
                
            }
            temp.push_back(s);
        }
        ans.push_back(temp);
        return;
    }
    bool isSafe(int row,int col,vector<vector<int>>&board)
    {
        int x=row;int y=col;
        int n=board[0].size();
        for(int i=0;i<row;i++)//checking for queens in same column
        {
            if(board[i][col]==1)return 0;
        }
        while(x>=0 and y>=0)//checking for queen in back diagonal
        {
            if(board[x][y]==1)return 0;
            x--,y--;
        }
        x=row,y=col;
        while(x>=0 and y<n)//checking for queen in front diagonal
        {
            if(board[x][y]==1)return 0;
            x--;
            y++;
        }
        return 1;
        
    }
    void helper(int index,int n,vector<vector<int>>&board,vector<vector<string>>&ans)
    {
        if(index==n)
        {
            solution(n,board,ans);
            return;
        }
        for(int i=0;i<n;i++)
        {
            if(isSafe(index,i,board))//checking if placing queen here forms solution or not
            {
                board[index][i]=1;
                helper(index+1,n,board,ans);
                board[index][i]=0;
            }
        }
        return;
    }
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>>ans;
        vector<vector<int>>board(n,vector<int>(n,0));
        helper(0,n,board,ans);
        return ans;
    }
