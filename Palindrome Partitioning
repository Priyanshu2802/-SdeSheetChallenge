bool isPalindrome(string s,int start,int end)
    {
        while(start<=end)
        {
            if(s[start++]!=s[end--])return false;
        }
        return 1;
    }
    void helper(int index,string s,vector<string>&curr,vector<vector<string>>&ans)
    {
        if(index==s.size())
        {
            ans.push_back(curr);
            return;
        }
        
        for(int i=index;i<s.size();i++)
        {
            if(isPalindrome(s,index,i))
            {
                curr.push_back(s.substr(index,i-index+1));
                helper(i+1,s,curr,ans);
                curr.pop_back();
            }
        }
        return;
    }
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string>>ans;
        vector<string>curr;
        helper(0,s,curr,ans);
        return ans;
    }
