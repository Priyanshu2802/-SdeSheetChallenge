ListNode *detectCycle(ListNode *head) {
       // map<ListNode*,int>mp;
       //  ListNode* temp=head;
       //  for(int i=0;temp!=NULL;i++)
       //  {
       //      if(mp[temp]!=0)return temp;
       //      mp[temp]=i+1;
       //      temp=temp->next;
       //  }
       //  return NULL;
        
        //O(1) space solution using fast and slow pointer
        //2(l1+l2)=(l1+l2+nc)
        //so l1+l2=nc
        //l1=nc-l2
        //thats why distance between slow node to collision node is same as head node to             //collision node
        ListNode* fast=head,*slow=head;
        while(slow and fast)
        {
            slow=slow->next;
            fast=fast->next;
            if(fast)fast=fast->next;
            if(fast==slow)break;
        }
        if(!fast || !slow)return NULL;
        ListNode* entry=head;
        while(slow !=entry)
        {
            slow=slow->next;
            entry=entry->next;
        }
        return entry;
    }
